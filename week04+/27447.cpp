// https://www.acmicpc.net/problem/27447
// 주문은 토기입니까?

// 문제
// “???: 저는 토끼를 주문했지, 토기를 주문하지는 않았습니다…”
// 한별이는 커피를 주문하면 빗살무늬 토기에 담아서 주는 이색 카페 “토기집”의 유일한 종업원이다.
// 커피를 토기에 담아 서빙할 때에는 다음과 같은 사항을 지켜야 한다.
// 토기는 직접 제작해야 한다. 커피를 토기에 넣으면 일정 시간 후 토기의 흙이 커피와 섞여 흙탕물이 되므로 서둘러 서빙해야 한다.
// 한 번 커피를 담았던 토기는 강도가 약해지므로 재사용하지 않아야 한다.
// 토기집에는 정수 시각에만 손님이 도착하며, 각 시각에는 최대 한 명의 손님까지만 올 수 있다.
// 토기집에 오는 손님들은 성질이 급하기 때문에 손님이 카페에 도착하는 순간 이미 그 손님 몫의 커피가 담긴 토기가 준비되어 있어야 하며,
// 손님이 도착함과 동시에 서빙을 시작해야 한다. 그렇지 않으면 그 손님이 나쁜 소문을 퍼트려 카페가 망하고 한별이는 빚더미에 앉게 된다.
// 이 일을 평생 해온 한별이는 1의 시간 동안 토기 하나를 만들거나, 토기 하나에 커피를 담거나, 커피를 담은 토기 하나를 손님에게 서빙할 수 있다.
// 두 가지 이상의 동작을 동시에 할 수는 없다. 커피는 한별이가 토기에 커피를 담는 것을 완료한 시점부터 M만큼의 시간이 지나면 흙탕물이 된다.
// 서빙을 완료하기 직전까지는 커피가 흙탕물이 아니어야 한다. 서빙 완료와 함께 커피가 흙탕물이 되는 것은 허용한다.
// 한별이가 일을 시작하는 시각은 0이다. 일을 시작할 때 이미 만들어져 있는 토기나 커피가 담겨있는 토기는 없다.
// 손님이 카페에 도착하는 시각들이 주어졌을 때, 한별이가 가게를 지켜내고 머리에 얹은 토기를 쓰다듬으며 시간을 보낼 수 있을지 구하여라.

// 입력
// 첫 번째 줄에는 손님의 수를 나타내는 정수 N과 토기에 담겨진 커피가 흙탕물이 되는 시간을 나타내는 정수 M이 공백을 사이에 두고 주어진다. (1 <= N,M <= 1,000,000)
// 두 번째 줄에는 각 손님이 카페에 도착하는 시각을 나타내는 정수 t_i가 오름차순으로 공백을 사이에 두고 주어진다. (0 <= t_i <= 1,000,000)

// 출력
// 첫 번째 줄에 한별이가 가게를 지켜낼 수 있으면 success, 지켜낼 수 없으면 fail을 출력한다.

// 예제 입력 1 
// 2 3
// 4 5
// 예제 출력 1 
// success
// 예제 입력 2 
// 2 3
// 3 4
// 예제 출력 2 
// fail

#include <vector>
#include <iostream>
using namespace std;

int main() {
ios_base::sync_with_stdio(false);
cin.tie(NULL);
///////////////////////////////////
int n_of_customer, muddy_time; cin >> n_of_customer >> muddy_time;
vector<int> time(1000001, 0);
int last_togi = -1;
for (int n = 0; n < n_of_customer; n++) {
    int t; cin >> t;    
    time[t] = 1;
    bool togi = false;
    for (int i = last_togi+1; i < t-1; i++) {
        if (time[i] == 0) {
            togi = true;
            last_togi = i;
            time[i] = 2;
            break;
        }
    }
    if (!togi) {cout << "fail"; return 0;}

    bool coffee = false;
    int limit_time = (last_togi>(t-muddy_time)?last_togi:(t-muddy_time));
    for (int i = limit_time; i < t; i++) {
        if (time[i] == 0) {
            coffee = true;
            time[i] = 3;
            break;
        }
    }
    if (!coffee) {cout << "fail"; return 0;}
}
cout << "success";
///////////////////////////////////
return 0;}